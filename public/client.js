const socket = io();

// HTML elementleri
const screens = { lobby: document.getElementById('lobby-screen'), roomSettings: document.getElementById('room-settings-screen'), game: document.getElementById('game-screen'), results: document.getElementById('results-screen') };
const playerNameInput = document.getElementById('player-name-input');
const createRoomBtn = document.getElementById('create-room-btn');
const joinRoomBtn = document.getElementById('join-room-btn');
const roomCodeInput = document.getElementById('room-code-input');
const returnToLobbyBtn = document.getElementById('return-to-lobby-btn');
const roomCodeDisplay = document.getElementById('room-code-display');
const myCelebrity = document.getElementById('my-celebrity');
const gameStatus = document.getElementById('game-status');
const playerGridContainer = document.getElementById('player-grid-container');
const roomControlsContainer = document.getElementById('room-controls-container');
const resultTitle = document.getElementById('result-title');
const resultDetails = document.getElementById('result-details');
const avatarGrid = document.getElementById('avatar-grid');
const micToggleBtn = document.getElementById('mic-toggle-btn');
const audioContainer = document.getElementById('audio-container');
const settingsBtn = document.getElementById('settings-btn');
const settingsModal = document.getElementById('settings-modal');
const closeSettingsBtn = document.getElementById('close-settings-btn');
const micSelect = document.getElementById('mic-select');
const noiseSuppressionToggle = document.getElementById('noise-suppression-toggle');
const micTestBar = document.getElementById('mic-test-bar');
const roundInfo = document.getElementById('round-info');
const customAlertModal = document.getElementById('custom-alert-modal');
const customAlertTitle = document.getElementById('custom-alert-title');
const customAlertMessage = document.getElementById('custom-alert-message');
const customAlertButtons = document.getElementById('custom-alert-buttons');
const createRoomWithSettingsBtn = document.getElementById('create-room-with-settings-btn');
const backToLobbyBtn = document.getElementById('back-to-lobby-btn');
const playerLimitInput = document.getElementById('player-limit-input');
const winScoreInput = document.getElementById('win-score-input');
const playerCountInfo = document.getElementById('player-count-info');
const winScoreInfo = document.getElementById('win-score-info');

let currentRoomId = null; let myPlayerId = null; let selectedAvatar = 'avatars/avatar1.png'; let localAudioStream = null; let peers = {}; let audioContext, analyser, dataArray, micTestSource;
const AVATAR_COUNT = 8; for (let i = 1; i <= AVATAR_COUNT; i++) { const avatarPath = `avatars/avatar${i}.png`; const img = document.createElement('img'); img.src = avatarPath; img.className = 'avatar-option'; if (i === 1) img.classList.add('selected'); img.onclick = () => { document.querySelectorAll('.avatar-option').forEach(el => el.classList.remove('selected')); img.classList.add('selected'); selectedAvatar = avatarPath; }; avatarGrid.appendChild(img); }
const backgroundTextContainer = document.querySelector('.background-text'); const texts = ["Sahtekar Kim?", "Acaba Kim?", "İçimizdeki Hain?", "Kim Yalan Söylüyor?", "Dikkatli Ol!", "Gizemli Oyuncu"]; for (let i = 0; i < 15; i++) { const span = document.createElement('span'); span.innerText = texts[Math.floor(Math.random() * texts.length)]; span.style.top = `${Math.random() * 100}%`; span.style.left = `${Math.random() * 100}%`; span.style.animationDuration = `${(Math.random() * 15) + 15}s`; span.style.animationDelay = `${Math.random() * 5}s`; backgroundTextContainer.appendChild(span); }
document.addEventListener('DOMContentLoaded', () => { const savedName = localStorage.getItem('playerName'); if (savedName) { playerNameInput.value = savedName; } });
playerNameInput.addEventListener('input', (e) => { localStorage.setItem('playerName', e.target.value); });
function showCustomAlert(title, message, buttons = [{ text: 'Tamam', value: true, className: 'btn-confirm' }]) { return new Promise(resolve => { customAlertTitle.innerHTML = title; customAlertMessage.innerHTML = message; customAlertButtons.innerHTML = ''; buttons.forEach(buttonInfo => { const button = document.createElement('button'); button.innerText = buttonInfo.text; button.className = buttonInfo.className; button.onclick = () => { customAlertModal.classList.add('hidden'); resolve(buttonInfo.value); }; customAlertButtons.appendChild(button); }); customAlertModal.classList.remove('hidden'); }); }
const switchScreen = (screenName) => { Object.values(screens).forEach(screen => screen.classList.remove('active')); screens[screenName].classList.add('active'); };
async function populateMicList() { try { await navigator.mediaDevices.getUserMedia({ audio: true }); const devices = await navigator.mediaDevices.enumerateDevices(); const mics = devices.filter(device => device.kind === 'audioinput'); micSelect.innerHTML = ''; mics.forEach(mic => { const option = document.createElement('option'); option.value = mic.deviceId; option.innerText = mic.label || `Mikrofon ${micSelect.options.length + 1}`; micSelect.appendChild(option); }); } catch (e) { console.error("Mikrofon listesi alınamadı:", e); } }
function startMicTest(stream) { if (!stream || !stream.active) { micTestBar.style.width = '0%'; return; } if (audioContext && audioContext.state !== 'closed') { audioContext.close(); } audioContext = new (window.AudioContext || window.webkitAudioContext)(); analyser = audioContext.createAnalyser(); micTestSource = audioContext.createMediaStreamSource(stream); micTestSource.connect(analyser); analyser.fftSize = 256; const bufferLength = analyser.frequencyBinCount; dataArray = new Uint8Array(bufferLength); function draw() { if (analyser && audioContext.state === 'running') { requestAnimationFrame(draw); analyser.getByteFrequencyData(dataArray); let sum = dataArray.reduce((a, b) => a + b, 0); let average = sum / bufferLength; micTestBar.style.width = `${Math.min(100, average * 1.5)}%`; } else { micTestBar.style.width = '0%'; } } draw(); }
async function getMicAndStartStream() { try { if (localAudioStream) { localAudioStream.getTracks().forEach(track => track.stop()); } const audioConstraints = { deviceId: micSelect.value ? { exact: micSelect.value } : undefined, noiseSuppression: noiseSuppressionToggle.checked, echoCancellation: true }; localAudioStream = await navigator.mediaDevices.getUserMedia({ video: false, audio: audioConstraints }); const icon = micToggleBtn.querySelector('i'); micToggleBtn.title = 'Mikrofonu Kapat'; micToggleBtn.classList.remove('muted'); icon.className = 'fas fa-microphone'; localAudioStream.getAudioTracks()[0].enabled = true; startMicTest(localAudioStream); } catch (err) { console.error("Mikrofon izni veya stream alınamadı.", err); await showCustomAlert('Mikrofon Hatası', 'Seçili mikrofonla ilgili bir sorun oluştu veya tarayıcıdan izin verilmedi.'); localAudioStream = null; startMicTest(null); } }
const updateGameView = (game) => { if (!game) return; roomCodeDisplay.innerText = currentRoomId; playerGridContainer.innerHTML = ''; roomControlsContainer.innerHTML = ''; roundInfo.innerText = game.gameState === 'lobby' ? 'Lobi' : `Tur ${game.currentRound}`; playerCountInfo.innerText = `Oyuncular: ${game.players.length}/${game.maxPlayers}`; winScoreInfo.innerText = `Hedef Puan: ${game.scoreToWin}`; const amIRoomOwner = game.players.length > 0 && game.players[0].id === myPlayerId; const hasVoted = game.votes && game.votes[myPlayerId]; game.players.forEach(player => { const playerCard = document.createElement('div'); playerCard.className = 'player-card'; if (game.votes && game.votes[player.id]) playerCard.classList.add('has-voted'); const playerScore = document.createElement('div'); playerScore.className = 'player-score'; playerScore.innerText = player.score; const playerAvatar = document.createElement('img'); playerAvatar.src = player.avatar; playerAvatar.className = 'player-avatar'; const playerNameDiv = document.createElement('div'); playerNameDiv.className = 'player-name'; playerNameDiv.innerText = player.name; playerCard.appendChild(playerScore); playerCard.appendChild(playerAvatar); playerCard.appendChild(playerNameDiv); if (game.gameState === 'playing' && player.id !== myPlayerId && !hasVoted) { const voteBtn = document.createElement('button'); voteBtn.innerText = 'Oyla'; voteBtn.dataset.playerId = player.id; voteBtn.onclick = () => socket.emit('playerVote', { roomId: currentRoomId, votedPlayerId: player.id }); playerCard.appendChild(voteBtn); } playerGridContainer.appendChild(playerCard); }); const leaveBtn = document.createElement('button'); leaveBtn.innerText = 'Lobiye Dön'; leaveBtn.className = 'leave-btn'; leaveBtn.onclick = async () => { const confirmed = await showCustomAlert('Odadan Ayrıl', 'Lobiye dönmek istediğine emin misin?', [{ text: 'Evet, Ayrıl', value: true, className: 'btn-confirm' }, { text: 'Hayır', value: false, className: 'btn-cancel' }]); if (confirmed) { socket.emit('leaveRoom', { roomId: currentRoomId }); window.location.reload(); } }; roomControlsContainer.appendChild(leaveBtn); if (amIRoomOwner) { if (game.gameState === 'lobby' || game.gameState === 'round_end') { const btnText = game.gameState === 'lobby' ? 'Oyunu Başlat' : `Sonraki Turu Başlat`; const startBtn = document.createElement('button'); startBtn.innerText = btnText; startBtn.disabled = game.players.length < 3; startBtn.onclick = () => socket.emit('startRound', currentRoomId); roomControlsContainer.appendChild(startBtn); } const closeBtn = document.createElement('button'); closeBtn.innerText = 'Odayı Kapat'; closeBtn.className = 'close-btn-host'; closeBtn.onclick = async () => { const confirmed = await showCustomAlert('Odayı Kapat', 'Odayı kapatmak istediğine emin misin? Herkes lobiye dönecek.', [{ text: 'Evet, Kapat', value: true, className: 'btn-confirm' }, { text: 'Hayır', value: false, className: 'btn-cancel' }]); if (confirmed) { socket.emit('closeRoom', { roomId: currentRoomId }); window.location.reload(); } }; roomControlsContainer.appendChild(closeBtn); } };
function createPeer(userToSignal, callerID, stream) { const peer = new SimplePeer({ initiator: true, trickle: false, stream, config: { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:stun1.l.google.com:19302' }] } }); peer.on("signal", signal => socket.emit("sending signal", { userToSignal, callerID, signal, roomId: currentRoomId })); peer.on('stream', stream => handleStream(stream, userToSignal)); return peer; }
function addPeer(incomingSignal, callerID, stream) { const peer = new SimplePeer({ initiator: false, trickle: false, stream, config: { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }, { urls: 'stun:stun1.l.google.com:19302' }] } }); peer.on("signal", signal => socket.emit("returning signal", { signal, callerID })); peer.signal(incomingSignal); peer.on('stream', stream => handleStream(stream, callerID)); return peer; }
function handleStream(stream, peerId) { let audio = document.getElementById(`audio-${peerId}`); if (!audio) { audio = document.createElement('audio'); audio.id = `audio-${peerId}`; audio.srcObject = stream; audio.autoplay = true; audio.playsinline = true; audioContainer.appendChild(audio); audio.play().catch(e => console.error("Ses otomatik oynatılamadı:", e)); } }
settingsBtn.addEventListener('click', () => { populateMicList(); settingsModal.classList.remove('hidden'); if (!localAudioStream) { getMicAndStartStream(); } });
closeSettingsBtn.addEventListener('click', () => settingsModal.classList.add('hidden'));
micSelect.addEventListener('change', getMicAndStartStream);
noiseSuppressionToggle.addEventListener('change', getMicAndStartStream);
createRoomBtn.addEventListener('click', () => { const playerName = playerNameInput.value.trim(); if (!playerName) return showCustomAlert('Giriş Hatası', 'Lütfen bir isim girin.'); switchScreen('roomSettings'); });
createRoomWithSettingsBtn.addEventListener('click', async () => { const playerName = playerNameInput.value.trim(); const playerLimit = playerLimitInput.value; const winScore = winScoreInput.value; if (!localAudioStream) await getMicAndStartStream(); if (localAudioStream) { socket.emit('createRoom', { playerName, avatar: selectedAvatar, playerLimit, winScore }); } });
backToLobbyBtn.addEventListener('click', () => { switchScreen('lobby'); });
document.querySelectorAll('.spinner-btn').forEach(button => { button.addEventListener('click', () => { const input = document.getElementById(button.dataset.inputId); let value = parseInt(input.value); const step = parseInt(input.step) || 1; const min = parseInt(input.min); const max = parseInt(input.max); if (button.dataset.action === 'increase') { value = Math.min(max, value + step); } else { value = Math.max(min, value - step); } input.value = value; }); });
joinRoomBtn.addEventListener('click', async () => { const playerName = playerNameInput.value.trim(); const roomId = roomCodeInput.value.trim(); if (!playerName || !roomId) return showCustomAlert('Giriş Hatası', 'Lütfen bir isim ve oda kodu girin.'); if (!localAudioStream) await getMicAndStartStream(); if (localAudioStream) { socket.emit('joinRoom', { roomId, playerName, avatar: selectedAvatar }); } });
micToggleBtn.addEventListener('click', () => { if (localAudioStream && localAudioStream.getAudioTracks().length > 0) { const audioTrack = localAudioStream.getAudioTracks()[0]; audioTrack.enabled = !audioTrack.enabled; const icon = micToggleBtn.querySelector('i'); micToggleBtn.classList.toggle('muted', !audioTrack.enabled); if (audioTrack.enabled) { micToggleBtn.title = 'Mikrofonu Kapat'; icon.className = 'fas fa-microphone'; } else { micToggleBtn.title = 'Mikrofonu Aç'; icon.className = 'fas fa-microphone-slash'; } } });
returnToLobbyBtn.addEventListener('click', () => window.location.reload());
socket.on('connect', () => { myPlayerId = socket.id; });
socket.on('roomCreated', (roomId) => { currentRoomId = roomId; switchScreen('game'); });
socket.on('joinedRoom', (roomId) => { currentRoomId = roomId; switchScreen('game'); });
socket.on('updateGameData', updateGameView);
socket.on('all users', (users) => { if (!localAudioStream) return; users.forEach(user => { if (user.id === myPlayerId) return; const peer = createPeer(user.id, myPlayerId, localAudioStream); peers[user.id] = peer; }); });
socket.on('user joined', (payload) => { if (!localAudioStream) return; const peer = addPeer(payload.signal, payload.callerID, localAudioStream); peers[payload.callerID] = peer; });
socket.on('receiving returned signal', (payload) => { if (peers[payload.id]) peers[payload.id].signal(payload.signal); });
socket.on('user-disconnected', id => { if (peers[id]) peers[id].destroy(); delete peers[id]; const audioEl = document.getElementById(`audio-${id}`); if (audioEl) audioEl.remove(); });
socket.on('roundStarted', (data) => { myCelebrity.innerText = data.celebrity; gameStatus.innerText = `Tur ${data.round} başladı! Konuşarak sahtekarı bulmaya çalışın.`; });
socket.on('roundEnd', (result) => { let winnerText = result.roundWinner === 'majority' ? 'Çoğunluk' : 'Sahtekar'; let message = `Turu <b>${winnerText}</b> kazandı!<br>`; if(result.votedPlayer) { message += `En çok oyu alan <b>${result.votedPlayer.name}</b>, ${result.votedPlayer.id === result.minorityPlayer.id ? 'Sahtekardı!' : 'masumdu!'}`; } else { message += `Oylama berabere bittiği için Sahtekar kazandı!`; } gameStatus.innerText = `Tur Bitti! ${winnerText} kazandı. Yeni tur bekleniyor...`; showCustomAlert(`Tur ${result.round} Bitti!`, message); });
socket.on('gameOver', ({ winner }) => { switchScreen('results'); resultTitle.innerText = 'OYUN BİTTİ!'; resultDetails.innerHTML = `Tebrikler, oyunun galibi <b>${winner.name}</b>!<br>Toplam Puan: <b>${winner.score}</b>`; });
socket.on('roomClosed', (message) => { showCustomAlert('Oda Kapatıldı', message).then(() => window.location.reload()); });
socket.on('gameCancelled', (message) => { showCustomAlert('Oyun İptal Edildi', message).then(() => window.location.reload()); });
socket.on('errorMessage', (message) => { showCustomAlert('Bir Hata Oluştu', message); });